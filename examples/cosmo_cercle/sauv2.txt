float rand(uint x, uint y) {
	return fract(sin(float(x) * 12.9898 + float(y) * 78.233) * 43758.5453);
}

int rgb_to_int(int r, int g, int b) {
	return 0xFF000000 | (r << 16) | (g << 8) | b;
}

int lerp_color(int c1, int r1, int g1, int b1, int r2, int g2, int b2, float t) {
	int r = int(float(r1) + t * float(r2 - r1));
	int g = int(float(g1) + t * float(g2 - g1));
	int b = int(float(b1) + t * float(b2 - b1));
	return rgb_to_int(r, g, b);
}
//voici le main
void main() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint p = x + y * WSX;

	int WHITE = 0xFFFFFFFF;
	int BLACK = 0xFF000000;
	int VIOLET = rgb_to_int(148, 0, 211);
	int BLUE = rgb_to_int(0, 0, 255);
	int ORANGE = rgb_to_int(255, 165, 0);
	int YELLOW = rgb_to_int(255, 255, 0);

	int cx = int(WSX) / 2;
	int cy = int(WSY) / 2;
	
	int dx = int(x) - cx;
	int dy = int(y) - cy;
	int distance_squared = dx * dx + dy * dy;
	float distance = sqrt(float(distance_squared));
	
	float angle = atan(float(dy), float(dx));
	if (angle < 0.0) angle += 3.14159 * 2.0;
	
	float angle_normalized = angle / (3.14159 * 2.0);
	
	int num_circles = 10;
	int max_radius = 200;
	int min_radius = 40;
	int thickness = 2;
	int frames_per_circle = 30;
	
	float radius_step = float(max_radius - min_radius) / float(num_circles - 1);
	
	int total_frames = frames_per_circle * num_circles * 2;
	
	bool is_appearing = (step % total_frames) < (frames_per_circle * num_circles);
	
	int current_step;
	if (is_appearing) {
		current_step = step % (frames_per_circle * num_circles);
	} else {
		current_step = total_frames - 1 - (step % total_frames);
	}
	
	int current_circle = current_step / frames_per_circle;
	int circle_progress = current_step % frames_per_circle;
	
	float completion_values[20];
	float start_angles[20];
	
	int safe_num_circles = min(num_circles, 20);
	
	for (int i = 0; i < safe_num_circles; i++) {
		completion_values[i] = 0.80 + rand(i, i) * (0.95 - 0.80);
		
		if (i == 0) {
			start_angles[i] = 0.0;
		} 
		else {
			if (i % 2 == (i-1) % 2) {
				start_angles[i] = completion_values[i-1];
			} 
			else {
				start_angles[i] = 1.0 - completion_values[i-1];
			}
		}
	}
	
	data_0[p] = BLACK;
	
	int visible_circles;
	if (is_appearing) {
		visible_circles = current_circle + 1; 
	} else {
		visible_circles = current_circle; 
	}
	
	for (int i = 0; i < safe_num_circles; i++) {
		bool is_circle_visible = i < visible_circles;
		
		if (!is_circle_visible) {
			continue; 
		}
		
		float current_radius = float(max_radius) - float(i) * radius_step;
		
		float inner_radius_sq = (current_radius - thickness) * (current_radius - thickness);
		float outer_radius_sq = (current_radius + thickness) * (current_radius + thickness);
		
		if (distance_squared >= inner_radius_sq && distance_squared <= outer_radius_sq) {
			float max_angle = completion_values[i];
			float start_angle = start_angles[i];
			
			if (i == current_circle) {
				float progress = float(circle_progress) / float(frames_per_circle);
				if (is_appearing) {
					max_angle = start_angle + progress * (max_angle - start_angle);
				} else {
					max_angle = max_angle - progress * (max_angle - start_angle);
				}
			}
			
			float adjusted_angle;
			if (i % 2 == 0) {
				adjusted_angle = angle_normalized;
			} else {
				adjusted_angle = 1.0 - angle_normalized;
			}
			
			if (adjusted_angle >= start_angle && adjusted_angle <= max_angle) {
				float circle_position = float(i) / float(safe_num_circles - 1);
				
				int color;
				if (circle_position < 0.33) {
					float t = circle_position / 0.33;
					color = lerp_color(0, 148, 0, 211, 0, 0, 255, t);
				} else if (circle_position < 0.66) {
					float t = (circle_position - 0.33) / 0.33;
					color = lerp_color(0, 0, 0, 255, 255, 165, 0, t);
				} else {
					float t = (circle_position - 0.66) / 0.34;
					color = lerp_color(0, 255, 165, 0, 255, 255, 0, t);
				}
				
				data_0[p] = color;
			}
		}
	}
	
	for (int i = 0; i < safe_num_circles - 1; i++) {
		bool is_line_visible = i < visible_circles - 1 && (i + 1) < visible_circles;
		
		if (!is_line_visible) {
			continue; 
		}
		
		float current_radius = float(max_radius) - float(i) * radius_step;
		float next_radius = float(max_radius) - float(i+1) * radius_step;
		
		float end_angle, next_start_angle;
		
		if (i % 2 == 0) {
			end_angle = completion_values[i] * 2.0 * 3.14159;
		} else {
			end_angle = (1.0 - completion_values[i]) * 2.0 * 3.14159;
		}
		
		if ((i+1) % 2 == 0) {
			next_start_angle = start_angles[i+1] * 2.0 * 3.14159;
		} else {
			next_start_angle = (1.0 - start_angles[i+1]) * 2.0 * 3.14159;
		}
		
		if (i == current_circle || i+1 == current_circle) {
			float progress = float(circle_progress) / float(frames_per_circle);
			
			if (i == current_circle) {
				if (is_appearing) {
					if (i % 2 == 0) {
						end_angle = (start_angles[i] + progress * (completion_values[i] - start_angles[i])) * 2.0 * 3.14159;
					} else {
						end_angle = ((1.0 - start_angles[i]) - progress * ((1.0 - start_angles[i]) - (1.0 - completion_values[i]))) * 2.0 * 3.14159;
					}
				} else {
					if (i % 2 == 0) {
						end_angle = (completion_values[i] - progress * (completion_values[i] - start_angles[i])) * 2.0 * 3.14159;
					} else {
						end_angle = ((1.0 - completion_values[i]) + progress * ((1.0 - start_angles[i]) - (1.0 - completion_values[i]))) * 2.0 * 3.14159;
					}
				}
			}
			
			if (i+1 == current_circle) {
				if (is_appearing) {
					if ((i+1) % 2 == 0) {
						next_start_angle = (start_angles[i+1] + progress * (completion_values[i+1] - start_angles[i+1])) * 2.0 * 3.14159;
					} else {
						next_start_angle = ((1.0 - start_angles[i+1]) - progress * ((1.0 - start_angles[i+1]) - (1.0 - completion_values[i+1]))) * 2.0 * 3.14159;
					}
				} else {
					if ((i+1) % 2 == 0) {
						next_start_angle = (completion_values[i+1] - progress * (completion_values[i+1] - start_angles[i+1])) * 2.0 * 3.14159;
					} else {
						next_start_angle = ((1.0 - completion_values[i+1]) + progress * ((1.0 - start_angles[i+1]) - (1.0 - completion_values[i+1]))) * 2.0 * 3.14159;
					}
				}
			}
		}
		
		float end_x = float(cx) + cos(end_angle) * current_radius;
		float end_y = float(cy) + sin(end_angle) * current_radius;
		
		float start_x = float(cx) + cos(next_start_angle) * next_radius;
		float start_y = float(cy) + sin(next_start_angle) * next_radius;
		
		float px = float(x);
		float py = float(y);
		
		float line_dx = start_x - end_x;
		float line_dy = start_y - end_y;
		float line_length_sq = line_dx * line_dx + line_dy * line_dy;
		
		float t = max(0.0, min(1.0, ((px - end_x) * line_dx + (py - end_y) * line_dy) / line_length_sq));
		
		float closest_x = end_x + t * line_dx;
		float closest_y = end_y + t * line_dy;
		
		float dist_sq = (px - closest_x) * (px - closest_x) + (py - closest_y) * (py - closest_y);
		
		if (dist_sq <= float(thickness * thickness)) {
			float circle_position = float(i) / float(safe_num_circles - 1);
			
			int color;
			if (circle_position < 0.33) {
				float t = circle_position / 0.33;
				color = lerp_color(0, 148, 0, 211, 0, 0, 255, t);
			} else if (circle_position < 0.66) {
				float t = (circle_position - 0.33) / 0.33;
				color = lerp_color(0, 0, 0, 255, 255, 165, 0, t);
			} else {
				float t = (circle_position - 0.66) / 0.34;
				color = lerp_color(0, 255, 165, 0, 255, 255, 0, t);
			}
			
			data_0[p] = color;
		}
	}
}
